"""Add Notification model

Revision ID: 298e14858a52
Revises: 73b0c8af3dc2
Create Date: 2025-09-27 13:40:18.962365

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "298e14858a52"
down_revision = "73b0c8af3dc2"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('user_agent_association',
    # sa.Column('user_id', sa.Integer(), nullable=True),
    # sa.Column('agent_id', sa.Integer(), nullable=True),
    # sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ),
    # sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    # )
    # with op.batch_alter_table('audit_log', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_audit_log_action'))
    #     batch_op.drop_index(batch_op.f('ix_audit_log_timestamp'))

    # op.drop_table('audit_log')
    # op.drop_table('agent_task')
    # op.drop_table('custom_tool')
    with op.batch_alter_table("agent", schema=None) as batch_op:
        batch_op.alter_column(
            "agent_id",
            existing_type=sa.VARCHAR(length=80),
            type_=sa.String(length=64),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "name",
            existing_type=sa.VARCHAR(length=120),
            type_=sa.String(length=128),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "description",
            existing_type=sa.VARCHAR(length=255),
            type_=sa.Text(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "location",
            existing_type=sa.VARCHAR(length=120),
            type_=sa.String(length=128),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "api_key",
            existing_type=sa.VARCHAR(length=120),
            type_=sa.String(length=256),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=20),
            type_=sa.String(length=16),
            existing_nullable=False,
        )
        batch_op.create_index(
            batch_op.f("ix_agent_agent_id"), ["agent_id"], unique=True
        )
        batch_op.create_unique_constraint("uq_agent_api_key", ["api_key"])

    with op.batch_alter_table("automation_log", schema=None) as batch_op:
        batch_op.alter_column(
            "task_id",
            existing_type=sa.VARCHAR(length=36),
            type_=sa.String(length=64),
            nullable=True,
        )
        batch_op.alter_column(
            "agent_id",
            existing_type=sa.VARCHAR(length=80),
            type_=sa.String(length=64),
            nullable=True,
        )
        batch_op.alter_column("timestamp", existing_type=sa.DATETIME(), nullable=True)
        batch_op.alter_column(
            "type",
            existing_type=sa.VARCHAR(length=50),
            type_=sa.String(length=64),
            nullable=True,
        )
        batch_op.alter_column(
            "name",
            existing_type=sa.VARCHAR(length=255),
            type_=sa.String(length=128),
            nullable=True,
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.VARCHAR(length=20),
            type_=sa.String(length=32),
            nullable=True,
        )
        batch_op.create_index(
            batch_op.f("ix_automation_log_agent_id"), ["agent_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_automation_log_timestamp"), ["timestamp"], unique=False
        )

    with op.batch_alter_table("notification", schema=None) as batch_op:
        batch_op.alter_column(
            "message",
            existing_type=sa.TEXT(),
            type_=sa.String(length=256),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "url",
            existing_type=sa.VARCHAR(length=255),
            type_=sa.String(length=256),
            existing_nullable=True,
        )
        batch_op.alter_column("timestamp", existing_type=sa.DATETIME(), nullable=True)
        batch_op.drop_index(batch_op.f("ix_notification_timestamp"))

    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.alter_column(
            "username",
            existing_type=sa.VARCHAR(length=150),
            type_=sa.String(length=64),
            nullable=True,
        )
        batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=True)
        batch_op.drop_column("role")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "role",
                sa.VARCHAR(length=80),
                server_default=sa.text("'operator'"),
                nullable=False,
            )
        )
        batch_op.drop_index(batch_op.f("ix_user_username"))
        batch_op.alter_column(
            "username",
            existing_type=sa.String(length=64),
            type_=sa.VARCHAR(length=150),
            nullable=False,
        )

    with op.batch_alter_table("notification", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_notification_timestamp"), ["timestamp"], unique=False
        )
        batch_op.alter_column("timestamp", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column(
            "url",
            existing_type=sa.String(length=256),
            type_=sa.VARCHAR(length=255),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "message",
            existing_type=sa.String(length=256),
            type_=sa.TEXT(),
            existing_nullable=False,
        )

    with op.batch_alter_table("automation_log", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_automation_log_timestamp"))
        batch_op.drop_index(batch_op.f("ix_automation_log_agent_id"))
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=32),
            type_=sa.VARCHAR(length=20),
            nullable=False,
        )
        batch_op.alter_column(
            "name",
            existing_type=sa.String(length=128),
            type_=sa.VARCHAR(length=255),
            nullable=False,
        )
        batch_op.alter_column(
            "type",
            existing_type=sa.String(length=64),
            type_=sa.VARCHAR(length=50),
            nullable=False,
        )
        batch_op.alter_column("timestamp", existing_type=sa.DATETIME(), nullable=False)
        batch_op.alter_column(
            "agent_id",
            existing_type=sa.String(length=64),
            type_=sa.VARCHAR(length=80),
            nullable=False,
        )
        batch_op.alter_column(
            "task_id",
            existing_type=sa.String(length=64),
            type_=sa.VARCHAR(length=36),
            nullable=False,
        )

    with op.batch_alter_table("agent", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="unique")
        batch_op.drop_index(batch_op.f("ix_agent_agent_id"))
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=16),
            type_=sa.VARCHAR(length=20),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "api_key",
            existing_type=sa.String(length=256),
            type_=sa.VARCHAR(length=120),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "location",
            existing_type=sa.String(length=128),
            type_=sa.VARCHAR(length=120),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "description",
            existing_type=sa.Text(),
            type_=sa.VARCHAR(length=255),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "name",
            existing_type=sa.String(length=128),
            type_=sa.VARCHAR(length=120),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "agent_id",
            existing_type=sa.String(length=64),
            type_=sa.VARCHAR(length=80),
            existing_nullable=False,
        )

    op.create_table(
        "custom_tool",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("name", sa.VARCHAR(length=100), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("content", sa.TEXT(), nullable=False),
        sa.Column("created_at", sa.DATETIME(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "agent_task",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("task_id", sa.VARCHAR(length=36), nullable=False),
        sa.Column("agent_id", sa.VARCHAR(length=80), nullable=False),
        sa.Column("command_type", sa.VARCHAR(length=50), nullable=False),
        sa.Column("command", sa.TEXT(), nullable=False),
        sa.Column("status", sa.VARCHAR(length=20), nullable=False),
        sa.Column("result", sa.TEXT(), nullable=True),
        sa.Column("created_at", sa.DATETIME(), nullable=False),
        sa.Column("updated_at", sa.DATETIME(), nullable=False),
        sa.Column("timeout_seconds", sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("task_id"),
    )
    op.create_table(
        "audit_log",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("timestamp", sa.DATETIME(), nullable=False),
        sa.Column("user_name", sa.VARCHAR(length=150), nullable=False),
        sa.Column("action", sa.VARCHAR(length=100), nullable=False),
        sa.Column("ip_address", sa.VARCHAR(length=45), nullable=True),
        sa.Column("details", sa.TEXT(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("audit_log", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_audit_log_timestamp"), ["timestamp"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_audit_log_action"), ["action"], unique=False
        )

    op.drop_table("user_agent_association")
    # ### end Alembic commands ###
